// backend/controllers/feelingController.js
const Feeling = require('../models/Feeling');
const User = require('../models/User');
const Class = require('../models/Class');
const { getEncouragementMessage, emotionLabels } = require('../utils/encouragementMessages');

/**
 * @desc    H·ªçc sinh g·ª≠i c·∫£m x√∫c h√¥m nay
 * @route   POST /api/feelings
 * @access  Private (Student)
 */
const submitFeeling = async (req, res) => {
  try {
    const { emotion, message } = req.body;
    const studentId = req.user._id;
    const classId = req.user.classId;

    // 1. Validation
    if (!emotion) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng ch·ªçn c·∫£m x√∫c'
      });
    }

    const validEmotions = ['happy', 'neutral', 'sad', 'angry', 'tired'];
    if (!validEmotions.includes(emotion)) {
      return res.status(400).json({
        success: false,
        message: 'C·∫£m x√∫c kh√¥ng h·ª£p l·ªá'
      });
    }

    // 2. Ki·ªÉm tra ƒë√£ g·ª≠i c·∫£m x√∫c h√¥m nay ch∆∞a
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const existingFeeling = await Feeling.findOne({
      studentId: studentId,
      date: { $gte: today }
    });

    if (existingFeeling) {
      return res.status(400).json({
        success: false,
        message: 'Em ƒë√£ g·ª≠i c·∫£m x√∫c h√¥m nay r·ªìi! H√£y quay l·∫°i v√†o ng√†y mai nh√©! üåü',
        alreadySubmitted: true,
        feeling: existingFeeling
      });
    }

    // 3. T·∫°o feeling m·ªõi
    const feeling = await Feeling.create({
      studentId,
      classId,
      emotion,
      message: message || '',
      date: new Date()
    });

    // 4. Populate student v√† class info
    const populatedFeeling = await Feeling.findById(feeling._id)
      .populate('studentId', 'name avatar studentCode')
      .populate('classId', 'name code');

    // 5. L·∫•y l·ªùi ƒë·ªông vi√™n
    const encouragement = getEncouragementMessage(emotion);

    // 6. Log ƒë·ªÉ teacher theo d√µi (n·∫øu c·∫£m x√∫c ti√™u c·ª±c)
    if (['sad', 'angry', 'tired'].includes(emotion)) {
      console.log(`‚ö†Ô∏è Alert: Student ${req.user.name} (${req.user.studentCode}) has ${emotion} emotion`);
    }

    // 7. Tr·∫£ v·ªÅ response
    res.status(201).json({
      success: true,
      message: 'C·∫£m ∆°n em ƒë√£ chia s·∫ª h√¥m nay! üíõ',
      data: populatedFeeling,
      encouragement: {
        message: encouragement.message,
        emoji: encouragement.emoji,
        color: encouragement.color,
        tip: encouragement.tip
      }
    });

  } catch (error) {
    console.error('Submit feeling error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi g·ª≠i c·∫£m x√∫c',
      error: error.message
    });
  }
};

/**
 * @desc    Ki·ªÉm tra h·ªçc sinh ƒë√£ g·ª≠i c·∫£m x√∫c h√¥m nay ch∆∞a
 * @route   GET /api/feelings/today
 * @access  Private (Student)
 */
const getTodayFeeling = async (req, res) => {
  try {
    const studentId = req.user._id;
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const feeling = await Feeling.findOne({
      studentId: studentId,
      date: { $gte: today }
    })
    .populate('studentId', 'name avatar')
    .populate('classId', 'name code')
    .sort({ createdAt: -1 });

    if (!feeling) {
      return res.status(200).json({
        success: true,
        submitted: false,
        message: 'Em ch∆∞a g·ª≠i c·∫£m x√∫c h√¥m nay'
      });
    }

    const encouragement = getEncouragementMessage(feeling.emotion);

    res.status(200).json({
      success: true,
      submitted: true,
      data: feeling,
      encouragement
    });

  } catch (error) {
    console.error('Get today feeling error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y c·∫£m x√∫c'
    });
  }
};

/**
 * @desc    L·∫•y l·ªãch s·ª≠ c·∫£m x√∫c c·ªßa h·ªçc sinh (7 ng√†y g·∫ßn nh·∫•t)
 * @route   GET /api/feelings/my-history
 * @access  Private (Student)
 */
const getMyHistory = async (req, res) => {
  try {
    const studentId = req.user._id;
    const { days = 7 } = req.query;

    const daysAgo = new Date();
    daysAgo.setDate(daysAgo.getDate() - parseInt(days));

    const feelings = await Feeling.find({
      studentId: studentId,
      date: { $gte: daysAgo }
    })
    .populate('classId', 'name code')
    .sort({ date: -1 });

    // Th·ªëng k√™ c·∫£m x√∫c
    const emotionCounts = feelings.reduce((acc, feeling) => {
      acc[feeling.emotion] = (acc[feeling.emotion] || 0) + 1;
      return acc;
    }, {});

    // C·∫£m x√∫c ph·ªï bi·∫øn nh·∫•t
    const mostCommonEmotion = Object.keys(emotionCounts).reduce((a, b) => 
      emotionCounts[a] > emotionCounts[b] ? a : b, 'neutral'
    );

    res.status(200).json({
      success: true,
      count: feelings.length,
      data: feelings,
      stats: {
        emotionCounts,
        mostCommon: {
          emotion: mostCommonEmotion,
          label: emotionLabels[mostCommonEmotion],
          count: emotionCounts[mostCommonEmotion] || 0
        },
        totalDays: parseInt(days)
      }
    });

  } catch (error) {
    console.error('Get history error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y l·ªãch s·ª≠'
    });
  }
};

/**
 * @desc    Teacher xem t·∫•t c·∫£ c·∫£m x√∫c c·ªßa l·ªõp
 * @route   GET /api/feelings/class/:classId
 * @access  Private (Teacher, Admin)
 */
const getClassFeelings = async (req, res) => {
  try {
    const { classId } = req.params;
    const { startDate, endDate, emotion } = req.query;

    // Ki·ªÉm tra quy·ªÅn: Teacher ch·ªâ xem ƒë∆∞·ª£c l·ªõp c·ªßa m√¨nh
    if (req.user.role === 'teacher') {
      const classDoc = await Class.findById(classId);
      if (!classDoc || classDoc.teacherId.toString() !== req.user._id.toString()) {
        return res.status(403).json({
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªõp n√†y'
        });
      }
    }

    // Build query
    const query = { classId };

    if (startDate && endDate) {
      query.date = {
        $gte: new Date(startDate),
        $lte: new Date(endDate)
      };
    }

    if (emotion) {
      query.emotion = emotion;
    }

    const feelings = await Feeling.find(query)
      .populate('studentId', 'name avatar studentCode')
      .populate('classId', 'name code')
      .sort({ date: -1 });

    res.status(200).json({
      success: true,
      count: feelings.length,
      data: feelings
    });

  } catch (error) {
    console.error('Get class feelings error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y d·ªØ li·ªáu'
    });
  }
};

/**
 * @desc    Teacher xem c·∫£m x√∫c h√¥m nay c·ªßa l·ªõp
 * @route   GET /api/feelings/class/:classId/today
 * @access  Private (Teacher, Admin)
 */
const getClassTodayFeelings = async (req, res) => {
  try {
    const { classId } = req.params;

    // Ki·ªÉm tra quy·ªÅn
    if (req.user.role === 'teacher') {
      const classDoc = await Class.findById(classId);
      if (!classDoc || classDoc.teacherId.toString() !== req.user._id.toString()) {
        return res.status(403).json({
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªõp n√†y'
        });
      }
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // L·∫•y t·∫•t c·∫£ h·ªçc sinh trong l·ªõp
    const students = await User.find({
      classId: classId,
      role: 'student',
      isActive: true
    }).select('name avatar studentCode');

    // L·∫•y c·∫£m x√∫c h√¥m nay
    const feelings = await Feeling.find({
      classId: classId,
      date: { $gte: today }
    }).populate('studentId', 'name avatar studentCode');

    // Map students v·ªõi feelings
    const studentsWithFeelings = students.map(student => {
      const feeling = feelings.find(f => 
        f.studentId._id.toString() === student._id.toString()
      );

      return {
        student: {
          _id: student._id,
          name: student.name,
          avatar: student.avatar,
          studentCode: student.studentCode
        },
        feeling: feeling || null,
        submitted: !!feeling
      };
    });

    // Th·ªëng k√™
    const stats = {
      total: students.length,
      submitted: feelings.length,
      notSubmitted: students.length - feelings.length,
      submissionRate: students.length > 0 
        ? ((feelings.length / students.length) * 100).toFixed(1)
        : 0
    };

    // ƒê·∫øm theo c·∫£m x√∫c
    const emotionCounts = feelings.reduce((acc, feeling) => {
      acc[feeling.emotion] = (acc[feeling.emotion] || 0) + 1;
      return acc;
    }, {});

    res.status(200).json({
      success: true,
      data: studentsWithFeelings,
      stats: {
        ...stats,
        emotionCounts
      }
    });

  } catch (error) {
    console.error('Get class today feelings error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y d·ªØ li·ªáu'
    });
  }
};

/**
 * @desc    Th·ªëng k√™ c·∫£m x√∫c theo ng√†y/tu·∫ßn
 * @route   GET /api/feelings/stats/:classId
 * @access  Private (Teacher, Admin)
 */
const getClassStats = async (req, res) => {
  try {
    const { classId } = req.params;
    const { period = 'week' } = req.query; // week, month, custom

    // Ki·ªÉm tra quy·ªÅn
    if (req.user.role === 'teacher') {
      const classDoc = await Class.findById(classId);
      if (!classDoc || classDoc.teacherId.toString() !== req.user._id.toString()) {
        return res.status(403).json({
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªõp n√†y'
        });
      }
    }

    // T√≠nh startDate d·ª±a tr√™n period
    let startDate = new Date();
    if (period === 'week') {
      startDate.setDate(startDate.getDate() - 7);
    } else if (period === 'month') {
      startDate.setDate(startDate.getDate() - 30);
    } else if (req.query.startDate) {
      startDate = new Date(req.query.startDate);
    }

    const endDate = req.query.endDate ? new Date(req.query.endDate) : new Date();

    // Aggregate th·ªëng k√™
    const stats = await Feeling.aggregate([
      {
        $match: {
          classId: require('mongoose').Types.ObjectId(classId),
          date: { $gte: startDate, $lte: endDate }
        }
      },
      {
        $group: {
          _id: {
            date: { $dateToString: { format: '%Y-%m-%d', date: '$date' } },
            emotion: '$emotion'
          },
          count: { $sum: 1 }
        }
      },
      {
        $sort: { '_id.date': 1 }
      }
    ]);

    // Format data cho chart
    const chartData = {};
    stats.forEach(item => {
      const date = item._id.date;
      if (!chartData[date]) {
        chartData[date] = {
          date,
          happy: 0,
          neutral: 0,
          sad: 0,
          angry: 0,
          tired: 0,
          total: 0
        };
      }
      chartData[date][item._id.emotion] = item.count;
      chartData[date].total += item.count;
    });

    // T·ªïng h·ª£p
    const totalStats = await Feeling.aggregate([
      {
        $match: {
          classId: require('mongoose').Types.ObjectId(classId),
          date: { $gte: startDate, $lte: endDate }
        }
      },
      {
        $group: {
          _id: '$emotion',
          count: { $sum: 1 }
        }
      }
    ]);

    const emotionSummary = totalStats.reduce((acc, item) => {
      acc[item._id] = item.count;
      return acc;
    }, {});

    // T√≠nh t·ª∑ l·ªá %
    const total = totalStats.reduce((sum, item) => sum + item.count, 0);
    const emotionPercentages = {};
    Object.keys(emotionSummary).forEach(emotion => {
      emotionPercentages[emotion] = ((emotionSummary[emotion] / total) * 100).toFixed(1);
    });

    res.status(200).json({
      success: true,
      period: {
        type: period,
        startDate,
        endDate
      },
      chartData: Object.values(chartData),
      summary: {
        total,
        emotionCounts: emotionSummary,
        emotionPercentages
      }
    });

  } catch (error) {
    console.error('Get stats error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y th·ªëng k√™',
      error: error.message
    });
  }
};

/**
 * @desc    Xem chi ti·∫øt 1 c·∫£m x√∫c
 * @route   GET /api/feelings/:id
 * @access  Private (Teacher, Admin, ho·∫∑c Student c·ªßa c·∫£m x√∫c ƒë√≥)
 */
const getFeelingById = async (req, res) => {
  try {
    const feeling = await Feeling.findById(req.params.id)
      .populate('studentId', 'name avatar studentCode')
      .populate('classId', 'name code');

    if (!feeling) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y c·∫£m x√∫c'
      });
    }

    // Ki·ªÉm tra quy·ªÅn: ch·ªâ student ch·ªß s·ªü h·ªØu ho·∫∑c teacher/admin
    if (req.user.role === 'student' && 
        feeling.studentId._id.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem d·ªØ li·ªáu n√†y'
      });
    }

    res.status(200).json({
      success: true,
      data: feeling
    });

  } catch (error) {
    console.error('Get feeling by id error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y d·ªØ li·ªáu'
    });
  }
};

/**
 * @desc    X√≥a c·∫£m x√∫c (Admin only ho·∫∑c student x√≥a c·ªßa m√¨nh)
 * @route   DELETE /api/feelings/:id
 * @access  Private (Admin ho·∫∑c Student owner)
 */
const deleteFeeling = async (req, res) => {
  try {
    const feeling = await Feeling.findById(req.params.id);

    if (!feeling) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y c·∫£m x√∫c'
      });
    }

    // Ki·ªÉm tra quy·ªÅn
    if (req.user.role !== 'admin' && 
        feeling.studentId.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a d·ªØ li·ªáu n√†y'
      });
    }

    await feeling.deleteOne();

    res.status(200).json({
      success: true,
      message: 'ƒê√£ x√≥a c·∫£m x√∫c'
    });

  } catch (error) {
    console.error('Delete feeling error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi x√≥a'
    });
  }
};

module.exports = {
  submitFeeling,
  getTodayFeeling,
  getMyHistory,
  getClassFeelings,
  getClassTodayFeelings,
  getClassStats,
  getFeelingById,
  deleteFeeling
};