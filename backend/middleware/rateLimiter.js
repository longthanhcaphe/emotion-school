// backend/middleware/rateLimiter.js
const rateLimit = require('express-rate-limit');

/**
 * General rate limiter - √°p d·ª•ng cho t·∫•t c·∫£ routes
 * 100 requests per 15 minutes per IP
 */
const generalLimiter = rateLimit({
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000,
  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100,
  message: {
    success: false,
    message: 'Qu√° nhi·ªÅu requests t·ª´ IP n√†y, vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t'
  },
  standardHeaders: true, // Return rate limit info in `RateLimit-*` headers
  legacyHeaders: false, // Disable `X-RateLimit-*` headers
  handler: (req, res) => {
    console.log(`‚ö†Ô∏è  Rate limit exceeded for IP: ${req.ip}`);
    res.status(429).json({
      success: false,
      message: 'Qu√° nhi·ªÅu requests. Vui l√≤ng th·ª≠ l·∫°i sau.',
      retryAfter: Math.ceil((req.rateLimit.resetTime - Date.now()) / 1000)
    });
  }
});

/**
 * Strict rate limiter - cho c√°c routes nh·∫°y c·∫£m (login, register)
 * 5 requests per 15 minutes per IP
 */
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // Limit each IP to 5 requests per windowMs
  skipSuccessfulRequests: false, // Count successful requests
  message: {
    success: false,
    message: 'Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t'
  },
  handler: (req, res) => {
    console.log(`üö® Auth rate limit exceeded for IP: ${req.ip}`);
    res.status(429).json({
      success: false,
      message: 'Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t.',
      retryAfter: Math.ceil((req.rateLimit.resetTime - Date.now()) / 1000)
    });
  }
});

/**
 * API rate limiter - cho c√°c API calls th√¥ng th∆∞·ªùng
 * 50 requests per 10 minutes per IP
 */
const apiLimiter = rateLimit({
  windowMs: 10 * 60 * 1000, // 10 minutes
  max: 50,
  message: {
    success: false,
    message: 'Qu√° nhi·ªÅu requests ƒë·∫øn API. Vui l√≤ng th·ª≠ l·∫°i sau.'
  },
  handler: (req, res) => {
    console.log(`‚ö†Ô∏è  API rate limit exceeded for IP: ${req.ip}`);
    res.status(429).json({
      success: false,
      message: 'Qu√° nhi·ªÅu requests. Vui l√≤ng ch·∫≠m l·∫°i.',
      retryAfter: Math.ceil((req.rateLimit.resetTime - Date.now()) / 1000)
    });
  }
});

/**
 * PDF Export rate limiter - gi·ªõi h·∫°n th·∫•p v√¨ t·ªën t√†i nguy√™n
 * 3 requests per 5 minutes per IP
 */
const pdfLimiter = rateLimit({
  windowMs: 5 * 60 * 1000, // 5 minutes
  max: 3,
  message: {
    success: false,
    message: 'Qu√° nhi·ªÅu requests xu·∫•t PDF. Vui l√≤ng ƒë·ª£i 5 ph√∫t.'
  },
  handler: (req, res) => {
    console.log(`üö® PDF rate limit exceeded for IP: ${req.ip}`);
    res.status(429).json({
      success: false,
      message: 'B·∫°n ƒë√£ xu·∫•t qu√° nhi·ªÅu b√°o c√°o. Vui l√≤ng ƒë·ª£i 5 ph√∫t.',
      retryAfter: Math.ceil((req.rateLimit.resetTime - Date.now()) / 1000)
    });
  }
});

/**
 * AI Analysis rate limiter - gi·ªõi h·∫°n trung b√¨nh
 * 10 requests per 10 minutes per IP
 */
const aiLimiter = rateLimit({
  windowMs: 10 * 60 * 1000, // 10 minutes
  max: 10,
  message: {
    success: false,
    message: 'Qu√° nhi·ªÅu requests ph√¢n t√≠ch AI. Vui l√≤ng ƒë·ª£i.'
  },
  handler: (req, res) => {
    console.log(`‚ö†Ô∏è  AI rate limit exceeded for IP: ${req.ip}`);
    res.status(429).json({
      success: false,
      message: 'Qu√° nhi·ªÅu requests ph√¢n t√≠ch. Vui l√≤ng ƒë·ª£i 10 ph√∫t.',
      retryAfter: Math.ceil((req.rateLimit.resetTime - Date.now()) / 1000)
    });
  }
});

module.exports = {
  generalLimiter,
  authLimiter,
  apiLimiter,
  pdfLimiter,
  aiLimiter
};